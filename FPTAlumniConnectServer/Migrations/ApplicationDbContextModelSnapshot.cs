// <auto-generated />
using System;
using FPTAlumniConnectServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FPTAlumniConnectServer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NTEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHide")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.GroupChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GroupChats");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.GroupChatMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupChatId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLeaved")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("GroupChatId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupChatMembers");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.JobApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicantName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CVFileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverLetter")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("JobPostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobPostId");

                    b.HasIndex("UserId");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.JobPost", b =>
                {
                    b.Property<int>("JobPostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobPostID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NTEXT");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Salary")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("JobPostID");

                    b.HasIndex("UserID");

                    b.ToTable("JobPosts");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.MentorshipFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NTEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MentorshipId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MentorshipId");

                    b.ToTable("MentorshipFeedbacks");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.MentorshipRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("MentorId")
                        .HasColumnType("int");

                    b.Property<string>("RequestMessage")
                        .IsRequired()
                        .HasColumnType("NTEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("StudentId");

                    b.ToTable("MentorshipRequests");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.MessageGroupChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NTEXT");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("MessageGroupChats");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<int>("RecipientUserId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedEntity")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("SenderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RecipientUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NTEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.PostReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostReports");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.PrivacySetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("VisibileToAlumni")
                        .HasColumnType("bit");

                    b.Property<bool>("VisibileToInstitution")
                        .HasColumnType("bit");

                    b.Property<bool>("VisibileToUniversity")
                        .HasColumnType("bit");

                    b.Property<bool>("VisibleToPublic")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PrivacySettings");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NTEXT");

                    b.Property<bool>("IsAnswered")
                        .HasColumnType("bit");

                    b.Property<int>("MentorshipId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MentorshipId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EducationHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMentor")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Major")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 21, 18, 11, 24, 84, DateTimeKind.Utc).AddTicks(602),
                            Email = "huyng.1801@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Huy",
                            HashPassword = "E10ADC3949BA59ABBE56E057F20F883E",
                            IsActive = true,
                            IsMentor = false,
                            LastName = "Nguyễn",
                            Role = 0,
                            UpdatedAt = new DateTime(2024, 9, 21, 18, 11, 24, 84, DateTimeKind.Utc).AddTicks(604)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 21, 18, 11, 24, 84, DateTimeKind.Utc).AddTicks(606),
                            Email = "mai.t@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mai",
                            HashPassword = "E10ADC3949BA59ABBE56E057F20F883E",
                            IsActive = true,
                            IsMentor = false,
                            LastName = "Trần",
                            Role = 1,
                            UpdatedAt = new DateTime(2024, 9, 21, 18, 11, 24, 84, DateTimeKind.Utc).AddTicks(607)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 21, 18, 11, 24, 84, DateTimeKind.Utc).AddTicks(609),
                            EducationHistory = "Computer Science",
                            Email = "lan.le@example.com",
                            EmailConfirmed = true,
                            FirstName = "Lan",
                            HashPassword = "E10ADC3949BA59ABBE56E057F20F883E",
                            IsActive = true,
                            IsMentor = true,
                            LastName = "Lê",
                            Major = "Software Engineering",
                            Role = 2,
                            UpdatedAt = new DateTime(2024, 9, 21, 18, 11, 24, 84, DateTimeKind.Utc).AddTicks(609)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 9, 21, 18, 11, 24, 84, DateTimeKind.Utc).AddTicks(611),
                            EducationHistory = "Mathematics",
                            Email = "toan.pham@example.com",
                            EmailConfirmed = false,
                            FirstName = "Toan",
                            HashPassword = "E10ADC3949BA59ABBE56E057F20F883E",
                            IsActive = true,
                            IsMentor = false,
                            LastName = "Phạm",
                            Major = "Data Science",
                            Role = 3,
                            UpdatedAt = new DateTime(2024, 9, 21, 18, 11, 24, 84, DateTimeKind.Utc).AddTicks(611)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 9, 21, 18, 11, 24, 84, DateTimeKind.Utc).AddTicks(613),
                            EducationHistory = "Physics",
                            Email = "an.nguyen@example.com",
                            EmailConfirmed = true,
                            FirstName = "An",
                            HashPassword = "E10ADC3949BA59ABBE56E057F20F883E",
                            IsActive = true,
                            IsMentor = true,
                            LastName = "Nguyễn",
                            Major = "Education",
                            Role = 4,
                            UpdatedAt = new DateTime(2024, 9, 21, 18, 11, 24, 84, DateTimeKind.Utc).AddTicks(614)
                        });
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.UserJoinEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("UserJoinEvents");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.Comment", b =>
                {
                    b.HasOne("FPTAlumniConnectServer.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTAlumniConnectServer.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.Event", b =>
                {
                    b.HasOne("FPTAlumniConnectServer.Entities.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.GroupChat", b =>
                {
                    b.HasOne("FPTAlumniConnectServer.Entities.User", "User")
                        .WithMany("GroupChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.GroupChatMember", b =>
                {
                    b.HasOne("FPTAlumniConnectServer.Entities.User", "AddedByUser")
                        .WithMany("AddedGroupChatMembers")
                        .HasForeignKey("AddedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FPTAlumniConnectServer.Entities.GroupChat", "GroupChat")
                        .WithMany("GroupChatMembers")
                        .HasForeignKey("GroupChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTAlumniConnectServer.Entities.User", "User")
                        .WithMany("GroupChatMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("GroupChat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.JobApplication", b =>
                {
                    b.HasOne("FPTAlumniConnectServer.Entities.JobPost", "JobPost")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTAlumniConnectServer.Entities.User", "User")
                        .WithMany("JobApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.JobPost", b =>
                {
                    b.HasOne("FPTAlumniConnectServer.Entities.User", "User")
                        .WithMany("JobPosts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.MentorshipFeedback", b =>
                {
                    b.HasOne("FPTAlumniConnectServer.Entities.MentorshipRequest", "MentorshipRequest")
                        .WithMany("MentorshipFeedbacks")
                        .HasForeignKey("MentorshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MentorshipRequest");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.MentorshipRequest", b =>
                {
                    b.HasOne("FPTAlumniConnectServer.Entities.User", "Mentor")
                        .WithMany("MentorOfMentorshipRequests")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTAlumniConnectServer.Entities.User", "Student")
                        .WithMany("StudentOfMentorshipRequests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.MessageGroupChat", b =>
                {
                    b.HasOne("FPTAlumniConnectServer.Entities.GroupChatMember", "GroupChatMember")
                        .WithMany("MessageGroupChats")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupChatMember");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.Notification", b =>
                {
                    b.HasOne("FPTAlumniConnectServer.Entities.User", "RecipientUser")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("RecipientUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTAlumniConnectServer.Entities.User", "SenderUser")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("RecipientUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.NotificationSetting", b =>
                {
                    b.HasOne("FPTAlumniConnectServer.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.Post", b =>
                {
                    b.HasOne("FPTAlumniConnectServer.Entities.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FPTAlumniConnectServer.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.PostReport", b =>
                {
                    b.HasOne("FPTAlumniConnectServer.Entities.Post", "Post")
                        .WithMany("PostReports")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPTAlumniConnectServer.Entities.User", "User")
                        .WithMany("PostReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.PrivacySetting", b =>
                {
                    b.HasOne("FPTAlumniConnectServer.Entities.User", "User")
                        .WithMany("PrivacySettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.Session", b =>
                {
                    b.HasOne("FPTAlumniConnectServer.Entities.MentorshipRequest", "MentorshipRequest")
                        .WithMany("Sessions")
                        .HasForeignKey("MentorshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MentorshipRequest");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.UserJoinEvent", b =>
                {
                    b.HasOne("FPTAlumniConnectServer.Entities.Event", "Event")
                        .WithMany("UserJoinEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FPTAlumniConnectServer.Entities.User", "User")
                        .WithMany("UserJoinEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.Event", b =>
                {
                    b.Navigation("UserJoinEvents");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.GroupChat", b =>
                {
                    b.Navigation("GroupChatMembers");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.GroupChatMember", b =>
                {
                    b.Navigation("MessageGroupChats");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.JobPost", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.MentorshipRequest", b =>
                {
                    b.Navigation("MentorshipFeedbacks");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostReports");
                });

            modelBuilder.Entity("FPTAlumniConnectServer.Entities.User", b =>
                {
                    b.Navigation("AddedGroupChatMembers");

                    b.Navigation("Comments");

                    b.Navigation("Events");

                    b.Navigation("GroupChatMembers");

                    b.Navigation("GroupChats");

                    b.Navigation("JobApplications");

                    b.Navigation("JobPosts");

                    b.Navigation("MentorOfMentorshipRequests");

                    b.Navigation("NotificationSettings");

                    b.Navigation("PostReports");

                    b.Navigation("Posts");

                    b.Navigation("PrivacySettings");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("StudentOfMentorshipRequests");

                    b.Navigation("UserJoinEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
